var express = require('express');
var server = express.Router();

const Upload = require('upload');
const BlockService = require('block-service');
const ThemeService = require('theme-service');
const PhotoService = require('photo-service');
const AppService = require('app-service');
const FileService = require('file-service');


server.get('/', function(req, res, next) {
    res.json({ a: "Hello service" });
});

module.exports = server;
//----------------------------

server.post('/upload', uploadFile);
server.post('/upload/file/robot', uploadRobotFile);

server.post('/upload/phonebook', uploadPhoneBook);
server.post('/import/phonebook', importPhoneBook);
server.post('/export/phonebook', exportPhoneBook);

server.post('/upload/image', uploadImage);
server.post('/convert/image', convertImage);

server.post('/export/block', exportBlock);

server.post('/upload/theme', uploadTheme);
server.post('/active/theme', activeTheme);
server.post('/publish/post', publishPost);

server.post('/upload/app', uploadApp);

/*********************************************************************** */
/*
    Export blocks from owned resource like theme, app.
    -- Request:
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function exportBlock(req, res, next) {
    var server = new BlockService(req.__session);
    var body = req.body,
        params = body.params ? JSON.parse(body.params) : {};

    var locOwnedResource = params.locResource;

    console.log('exportBlock', locOwnedResource);

    server.exportBlock(locOwnedResource, (err, result) => {
        res.send({
            code: (err && err.length > 0) ? 1 : 0,
            error: err,
            result: result,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Upload Theme
    -- Request:
    + In upload form, must have {file} input type with attribute {name="files"}
    + {action} attribute in form has value is api URL
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function uploadTheme(req, res, next) {
    var server = new ThemeService(req.__session);

    server.upload(req, next, (result, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            result: result,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Publish post
    -- Request:
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function publishPost(req, res, next) {
    var server = new ThemeService(req.__session);
    var body = req.body,
        params = body.params ? JSON.parse(body.params) : {};

    var locPost = params.locPost;
    var locSite = params.locWeb;

    console.log('publishPost', locSite, locPost);

    server.publishPost(locPost, locSite, (err) => {
        res.send({
            code: (err) ? 1 : 0,
            error: err,
            time: new Date().getTime()
        });

    });
}

/*********************************************************************** */
/*
    Active theme
    -- Request:
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function activeTheme(req, res, next) {
    var server = new ThemeService(req.__session);
    var body = req.body,
        params = body.params ? JSON.parse(body.params) : {};

    var sileLoc = params.siteLoc;
    var themeLoc = params.themeLoc;

    console.log('activeTheme', sileLoc, themeLoc);

    server.activeTheme(themeLoc, sileLoc, (err) => {
        res.send({
            code: (err) ? 1 : 0,
            error: err,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Upload file
    -- Request:
    + In upload form, must have {file} input type with attribute {name="files"}
    + {action} attribute in form has value is api URL
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function uploadFile(req, res, next) {
    var server = new Upload(req.__session);

    server.save(req, next, 'file', (uploadedFiles, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            files: uploadedFiles,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Upload robot file
    -- Request:
    + In upload form, must have {file} input type with attribute {name="files"}
    + {action} attribute in form has value is api URL
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function uploadRobotFile(req, res, next) {
	var server = new FileService(req.__session);
	console.log(req);
		
    server.saveRobotFile(req, next, 'file', (uploadedFile, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            files: uploadedFile,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Upload phone book
    -- Request:
    + In upload form, must have {file} input type with attribute {name="files"}
    + {action} attribute in form has value is api URL
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function uploadPhoneBook(req, res, next) {
    var server = new FileService(req.__session);

    server.save(req, next, (uploadedFiles, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            files: uploadedFiles,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Import Excel XLSX
    -- Request:
    + {params: loc}
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, data: [] }
*/
/*********************************************************************** */
function importPhoneBook(req, res, next) {
    var server = new FileService(req.__session);
    var body = req.body,
        params = body.params ? JSON.parse(body.params) : {};

    var loc = params.strloc;
    var url = params.url;

    server.importXLSX(loc, url, (data, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            data: data,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Export Excel XLSX
    -- Request:
    + {params: {{filters}, limit}
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, data: [] }
*/
/*********************************************************************** */
function exportPhoneBook(req, res, next) {
    var server = new FileService(req.__session);
    var body = req.body;
    var params = body.params ? JSON.parse(body.params) : {};
    var filters = params.filters;
    var limit = params.limit || 100;

    server.exportXLSX(filters, limit, (err, result) => {
        res.send({
            error: err,
            result: result,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Upload Image
    -- Request:
    + In upload form, must have {file} input type with attribute {name="files"}
    + {action} attribute in form has value is api URL
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function uploadImage(req, res, next) {
    var server = new PhotoService(req.__session);

    server.save(req, next, (result, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            result: result,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Upload App
    -- Request:
    + In upload form, must have {file} input type with attribute {name="files"}
    + {action} attribute in form has value is api URL
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }
*/
/*********************************************************************** */
function uploadApp(req, res, next) {
    var server = new AppService(req.__session);

    server.upload(req, next, (result, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            result: result,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Convert Image to multiple sizes
    -- Request:
    + Link: https://ringer.biz/api/sv/convert/image
    {
        meta: { loc:"oid-sid-fid-id" },
        params: {
          "resolution": [{
            "quality": <number>,
            "width": <number>,
            "height": <number>,
            "gravity": "[NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast]"
          }],
          "action": "resize/crop"
          "overwrite": "yes",
        }
    }
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0, error: null, files: [] }

  **** quality default is 90%
  **** gravity default is Center
*/
/*********************************************************************** */
function convertImage(req, res, next) {
    var server = new PhotoService(req.__session);

    server.convert(req, (convertedFiles, err) => {
        res.send({
            code: (err.length) ? 1 : 0,
            error: err,
            files: convertedFiles,
            time: new Date().getTime()
        });
    });
}
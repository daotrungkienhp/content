var express = require('express');
var server = express.Router();

server.get('/', function(req, res, next) {
    res.json({ a: "Hello ODB" });
});

module.exports = server;
// ---------------------

var ODB = require('odb');
const INVALID_REQUEST = "Invalid request";

server.post('/get', get);
server.post('/get-lock', getLock);
server.post('/get-one', getOne);
server.post('/get-data-list', getDataList);
server.post('/save', save);
server.post('/create-batch', createBatch);
server.post('/update-batch', updateBatch);
server.post('/remove', remove);
server.post('/remove-list', removeList);
server.post('/search', search);
server.post('/get-new-id', getNewId);

// ---------------------
server.post('/register-user', register);
server.post('/delete-user', deleteUser);

/*********************************************************************** */
/*
    Get new id from odb.
    -- Request:
    + Link: https://ringer.biz/api/get-new-id
    -- Response:
    + Error: { code: 1, error: err, id:"nano-id" }
    + Success: { code: 0 }
*/
/*********************************************************************** */
function getNewId(req, res, next) {
    res.json({
        code: 0,
        id: ODB.getNewNanoId(),
        time: new Date().getTime()
    });
}

/*********************************************************************** */
/*
    Get lock of space.
    -- Request:
    + Link: https://ringer.biz/get-lock
    {
        meta: { "loc":"oid-sid" },
    }
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0 }
*/
/*********************************************************************** */
function getLock(req, res, next) {
    var self = req;
    var session = self.__session;

    // console.log(arguments.callee.name, JSON.stringify(self.body));
    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    var db = new ODB(session);
    db.get_lock(meta.loc, (data) => {
        res.json({
            code: 0,
            data: data,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Get an instance or alls of object.
    -- Request:
    + Link: https://ringer.biz/get
    {
        meta: { "loc":"oid-sid-fid-id", "mode": "full" },
    }
    -- Response:
    + Error: { code: 1, error: err }
    + Success: { code: 0 }
*/
/*********************************************************************** */
function get(req, res, next) {
    var self = req;
    var session = self.__session;

    // console.log(arguments.callee.name, JSON.stringify(self.body));
    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    let mode = meta.mode || {};
    var db = new ODB(session);
    db.get(meta.loc, (data) => {
        if (mode !== 'full') {
            return res.json({
                code: 0,
                data: data,
                time: new Date().getTime()
            });

        }

        get_full_object(data, session, db, (data) => {
            res.json({
                code: 0,
                data: data,
                time: new Date().getTime()
            });
        });

    });
}

function get_full_object(data, session, odb, callback) {
    let locs = [];
    let originLoc = ODB.parseLoc(data.loc);
    Object.keys(data).forEach((key) => {
        if (key !== 'loc') {
            if (Array.isArray(data[key])) {
                let arrayLoc = [];
                for (let i = 0; i < data[key].length; i++) {
                    let loc = ODB.parseLoc(data[key][i]);
                    if (loc && loc.fid && loc.id && loc.oid === originLoc.oid) {
                        arrayLoc.push(data[key][i]);
                    }
                }
                let obj = { "key": key, "loc": arrayLoc, 'isArray': true };
                if (obj.loc.length) {
                    locs.push(obj);
                }
            } else {
                let loc = ODB.parseLoc(data[key]);
                if (loc && loc.fid && loc.id && loc.oid === originLoc.oid) {
                    let obj = { "key": key, "loc": [data[key]], 'isArray': false };
                    locs.push(obj);
                }
            }
        }
    });

    function get_item(loc, callback) {
        if (!loc) {
            return callback(data);
        }

        loc.values = [];

        function get_details(strloc, callback) {
            if (!strloc) {
                return callback();
            }
            var db = new ODB(session);
            db.get(strloc, (item) => {
                loc.values.push(item);
                get_details(loc.loc.shift(), callback);
            });
        }

        get_details(loc.loc.shift(), () => {
            if (loc.isArray) {
                data[loc.key] = loc.values;
            } else {
                data[loc.key] = loc.values[0];
            }
            get_item(locs.shift(), callback);
        });
    }

    get_item(locs.shift(), callback);
}

/*********************************************************************** */
/*
    Get an instance or alls of object.
    -- Request:
    + Link: https://ringer.biz/get-data-list
    {
        meta: { "locs":["loc1","loc2",...] }
    }
    -- Response:
    + Error: { code: 1, error: err}
    + Success: { code: 0, data: {list: []}}
*/
/*********************************************************************** */
function getDataList(req, res, next) {
    var self = req;
    var session = self.__session;

    // console.log('getDataList', JSON.stringify(self.body));
    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    var locs = [].concat(meta.locs).filter(Boolean).sort();
    let mode = meta.mode || {};

    var list = [];

    function get_item(loc, callback) { // sequence
        if (!loc)
            return callback();

        var db = new ODB(session);
        db.get(loc, (item) => {
            list.push(item);
            get_item(locs.shift(), callback);
        });
    }

    get_item(locs.shift(), () => {
        if (mode !== 'full') {
            return res.json({
                code: 0,
                data: { list: list },
                time: new Date().getTime()
            });
        }
        let dataList = [];

        function getDataList(obj, session, callback) {
            if (!obj) {
                return callback();
            }
            get_full_object(obj, session, (data) => {
                dataList.push(data);
                getDataList(list.shift(), session, callback);
            });
        }

        getDataList(list.shift(), session, () => {
            res.json({
                code: 0,
                data: { list: dataList },
                time: new Date().getTime()
            });
        });
    });
}

/*********************************************************************** */
/*
    Save or add an instance of object.
    -- Request:
    + Link: https://ringer.biz/save
    {
        meta: {"loc":"oid-sid"}, // insert
        meta: {"loc":"oid-sid-fid-id"}, // save
        data: {} // data record
    }
    -- Response:
    + Error: { code: 1, error: err}
    + Success: { code: 0, error: null, url:''}
*/
/*********************************************************************** */
function save(req, res, next) {
    var self = req;
    var session = self.__session;
    // console.log(arguments.callee.name, JSON.stringify(self.body));
    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    var data = (self.body.data) ? JSON.parse(self.body.data) : {};

    var db = new ODB(session);
    console.log(req.__session);
    db.save(meta.loc, data, (err) => {
        res.json({
            code: (err) ? 1 : 0,
            error: err,
            data: { loc: data.loc },
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Add batches instance of object.
    -- Request:
    + Link: https://ringer.biz/create-batches
    {
        meta: {"loc":"oid-sid"},
        data: {}, // data record
        params: {"random_field": {"name": name, "length": <number>, "prefix": <string>}, "number": <number>}
    }
    -- Response:
    + Error: { code: 1, error: err}
    + Success: { code: 0, error: null, url:''}
*/
/*********************************************************************** */
function createBatch(req, res, next) {
    var self = req;
    var session = self.__session;
    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    var data = (self.body.data) ? JSON.parse(self.body.data) : {};
    var params = (self.body.params) ? JSON.parse(self.body.params) : {};
    var random_field = params.random_field || {};
    var number = params.number || 1;

    let result = {
        "error": [],
        "success": 0,
        "locs": []
    }

    function create(number, data, callback) {
        if (number === 0) {
            return callback();
        }

        let data_obj = data;
        if (random_field.length > 0) {
            data_obj[random_field.name] = random_chars(random_field.length, random_field.prefix);
        }

        var db = new ODB(session);
        db.save(meta.loc, data_obj, (err) => {
            if (err) {
                result.error.push(err);
            } else {
                result.success += 1;
                result.locs.push(data_obj.loc);
            }
            create(number - 1, data, callback);
        });
    }

    create(number, data, () => {
        res.json({
            code: 0,
            list: result,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Add batches instance of object.
    -- Request:
    + Link: https://ringer.biz/update-batches
    {
        meta: {"locs":["oid-sid-fid-id"]},
        data: {} // data record
    }
    -- Response:
    + Error: { code: 1, error: err}
    + Success: { code: 0, error: null, url:''}
*/
/*********************************************************************** */
function updateBatch(req, res, next) {
    var self = req;
    var session = self.__session;

    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    var locs = [].concat(meta.locs).filter(Boolean).sort();
    var data = (self.body.data) ? JSON.parse(self.body.data) : {};

    var list = {
        "error": [],
        "success": 0,
        "locs": []
    }

    function save_item(loc, callback) { // sequence
        if (!loc)
            return callback();
        let data_obj = JSON.parse(JSON.stringify(data));
        var db = new ODB(session);
        db.save(loc, data_obj, (err) => {
            if (err) {
                list.error.push(err);
            } else {
                list.success += 1;
                list.locs.push(data_obj.loc);
            }
            save_item(locs.shift(), callback);
        });
    }

    save_item(locs.shift(), () => {
        res.json({
            code: 0,
            data: { list: list },
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */

/*********************************************************************** */
/*
    Remove an instance of object.
    -- Request:
    + Link: https://ringer.biz/remove
    {
        meta: {"loc":"oid-sid-fid-id"},
    }
    -- Response:
    + Error: { code: 1, error: err}
    + Success: { code: 0}
*/
/*********************************************************************** */
function remove(req, res, next) {
    var self = req;
    var session = self.__session;
    // console.log(arguments.callee.name, JSON.stringify(self.body));
    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};

    var db = new ODB(session);
    db.remove(meta.loc, (err) => {
        res.json({
            code: (err) ? 1 : 0,
            error: err,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Remove list instances of object.
    -- Request:
    + Link: https://ringer.biz/remove-list
    {
        meta: {"locs":"oid-sid-fid-id"},
    }
    -- Response:
    + Error: { code: 1, error: err}
    + Success: { code: 0}
*/
/*********************************************************************** */
function removeList(req, res, next) {
    var self = req;
    var session = self.__session;
    var meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    var locs = [].concat(meta.locs).filter(Boolean).sort();
    var erros = [];
    var db = new ODB(session);

    function remove_loc(loc, callback) { // sequence
        if (!loc)
            return callback(erros);

        db.remove(loc, (err) => {
            if (err) {
                erros.push(err);
            }
            remove_loc(locs.shift(), callback);
        });
    }

    remove_loc(locs.shift(), (err) => {
        res.json({
            code: (err.length) ? 1 : 0,
            error: err,
            time: new Date().getTime()
        });
    })
}

/*********************************************************************** */
/*
    Search many instances of object.
    -- Request:
    + Link (newests): https://vn1.ringer.biz/api/search
    {
        meta: {"loc":"oid-sid"},
        query: {
            "filters":{"and/or": [
                {filter object},
                {filter object}
           ]},
           "limit": number,
           "offset": "fid-id"
        },
        date: {"from": "", "to": ""}, // toString(36)
        cache: "has-cache" / "no-cache"
    }
    + filter object:  {"name":filed,"op":operation,"val":valued}
    + operation: eq (equal), gt (greater than), lt (less than), ge (greater or equal), le (less or equal), ct (contain)
    -- Response:
    + Error: { code: 1, error: err}
    + Success: { code: 0, data: {list: []}}
*/
/*********************************************************************** */
function search(req, res, next) {
    let self = req;
    let session = req.__session;
    let meta = (req.body.meta) ? JSON.parse(req.body.meta) : {};
    let params = (req.body.params) ? JSON.parse(req.body.params) : {};
    let time = (params.date) ? params.date : {};
    let cache = (params.cache) ? (params.cache) : null;
    let filters = params.query.filters,
        offset = params.query.offset,
        limit = params.query.limit;


    console.log('search', meta.loc, filters, offset, limit);

    var db = new ODB(session);
    db.search(meta.loc, filters, offset, limit, time, cache, (data) => {
        res.json({
            code: 0,
            meta: meta,
            data: data,
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Search many instances of object.
    -- Request:
    + Link (newests): https://vn1.ringer.biz/api/get-one
    {
        meta: {"loc":"oid-sid"},
        params: {
            "name": <name field>,
            "val": <value>
        }
    }
    -- Response:
    + Error: { code: 0}
    + Success: { code: 0, data: {}}
*/
/*********************************************************************** */
function getOne(req, res, next) {
    let self = req;
    let session = self.__session;
    let meta = (self.body.meta) ? JSON.parse(self.body.meta) : {};
    let params = (self.body.params) ? JSON.parse(self.body.params) : {};
    let name = params.name || "";
    let val = params.val || "";
    let filters = {
        "and": [{
            "name": name,
            "op": "eq",
            "val": val
        }]
    }
    let offset = "0";
    let limit = 1;
    var db = new ODB(session);
    db.search(meta.loc, filters, offset, limit, [], '', (data) => {
        res.json({
            code: 0,
            meta: meta,
            data: data.list[0],
            time: new Date().getTime()
        });
    });
}

/*********************************************************************** */
/*
    Register User
    -- Request:
    + Link: https://ringer.biz/api/register-user
    -- Response:
    + Error: { code: 1, error: err, id:"nano-id" }
    + Success: { code: 0, user: {} }
*/
/*********************************************************************** */
function register(req, res, next) {
    let self = req;
    let params = (self.body.params) ? JSON.parse(self.body.params) : {};
    let userName = params.userName || "";
    let userPass = params.userPass || "";

    ODB.initUserSpace(userName, userPass, (user) => {
        res.json({
            code: 0,
            user: user,
            id: ODB.getNewNanoId(),
            time: new Date().getTime()
        });
    })
}

/*********************************************************************** */
/*
    Delete User
    -- Request:
    + Link: https://ringer.biz/api/delete-user
    -- Response:
    + Error: { code: 1, error: err, id:"nano-id" }
    + Success: { code: 0, }
*/
/*********************************************************************** */
function deleteUser(req, res, next) {
    let self = req;
    let session = self.__session;
    let params = (self.body.params) ? JSON.parse(self.body.params) : {};
    let userLoc = params.userLoc || "";
    let option = params.option || "";

    let odb = new ODB(session);

    odb.deleteUserSpace(userLoc, option, (err, result) => {
        res.json({
            code: 0,
            error: err,
            result: result,
            time: new Date().getTime()
        });
    })
}

/*********************************************************************** */
/*
    Random chars for field when creating multiple objects
*/
/*********************************************************************** */
function random_chars(length, prefix) {
    prefix = prefix || "";
    let text = '';
    let charset = 'abcdefghijklmnopqrstuvwxyz0123456789';

    for (let i = 0; i < length; i++) {
        text += charset.charAt(Math.floor(Math.random() * charset.length));
    }

    return [prefix, text].join('-');
}